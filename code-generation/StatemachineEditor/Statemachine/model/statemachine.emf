@Ecore(invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot")
@namespace(uri="http://www.upbracing.de/code_generation/statemachine", prefix="statemachine")
package statemachine;

abstract class StateScope {
	op StateParent getParent();
}

abstract class StateParent extends StateScope {
	op State[*] getStates();
}

abstract class NamedItem {
   op String getName();
}

@gmf.diagram
class StateMachine extends StateParent {
  attr String basePeriod;
  !ordered val Transition[*] transitions;
  !ordered val State[*] states;
  !ordered val GlobalCode[*] globalCodeBoxes;
}

abstract class State extends StateScope, NamedItem {
  !ordered ref Transition[*]#destination incomingTransitions;
  !ordered ref Transition[*]#source outgoingTransitions;
  
  ref StateParent[1]#states parent;
}

@Ecore(constraints="no_incoming")
@gmf.node(label="name", label.icon="false", label.placement="none", figure="ellipse", color="0,0,0", border.color="0,0,0", size="30,30")
@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(no_incoming="self.incomingTransitions->isEmpty()")
class InitialState extends State {
  attr String name = "start";
}

@Ecore(constraints="no_outgoing")
@gmf.node(label="name", label.icon="false", label.placement="none", figure="rectangle", color="0,0,0", border.color="0,0,0", size="30,30")
@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(no_outgoing="self.outgoingTransitions->isEmpty()")
class FinalState extends StateWithActions {
  attr String name = "end";
}

abstract class StateWithActions extends State {
  @gmf.label
  attr String actions = "";
}

@gmf.node(label="name", label.icon="false", figure="rounded", color="230,230,250", border.color="0,0,0", size="1,1", label.pattern="{0}")
class NormalState extends StateWithActions {
  attr String name;
}

@gmf.node(label="name", label.icon="false", figure="rectangle", color="255,240,245", border.color="0,0,0")
class SuperState extends StateWithActions, StateParent {
  attr String name;

  @gmf.compartment(collapsible="true")
  val Region[*] regions;
}

@gmf.node(label="name", label.icon="false", figure="rectangle", border.color="0,0,0")
class Region extends StateParent, NamedItem {
  attr String name;
  
  @gmf.compartment(collapsible="true")
  !ordered val State[*] states;
  
  ref StateParent[1]#regions parent;
}

@gmf.link(label="transitionInfo", source="source", target="destination", target.decoration="arrow", color="0,0,0")
class Transition {
  ref State[1]#outgoingTransitions source;
  ref State[1]#incomingTransitions destination;
  attr String[1] transitionInfo = "[true]";
  attr int priority = 0;
}

@gmf.node(label="name", label.icon="false", figure="rectangle", label.placement="internal", color="245,245,245", border.color="0,0,0", label.pattern="{0}")
class GlobalCode extends NamedItem {
  attr String name = "global code";

  @gmf.label
  attr String code = "";
  attr Boolean inHeaderFile = "false";
}
