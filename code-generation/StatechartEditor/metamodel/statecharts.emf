@namespace(uri="http://statechart", prefix="Statecharts")
package Statecharts;

@gmf.diagram
class StateMachine {
  attr String basePeriod;
  
  val Transition[*] transitions;
  
  val State[*] states;
  
  val GlobalCode[*] globalCodeBoxes;
}

abstract class State {
}

@gmf.node(label="name", label.icon="false", label.placement="none", figure="ellipse", color="0,0,0", border.color="0,0,0", size="30,30")
class InitialState extends State {
  attr String name = "start";
}

@gmf.node(label="name", label.icon="false", label.placement="none", figure="rectangle", color="0,0,0", border.color="0,0,0", size="30,30")
class FinalState extends State {
  attr String name = "end";
}

abstract class StateWithActions extends State {
  @gmf.label
  attr String actions = "";
}

@gmf.node(label="name", label.icon="false", figure="rounded", color="230,230,250", border.color="0,0,0", size="1,1", label.pattern="{0}")
class NormalState extends StateWithActions {
  attr String name;
}

@gmf.node(label="name", label.icon="false", figure="rectangle", color="255,240,245", border.color="0,0,0")
class SuperState extends StateWithActions {
  attr String name;
  
  @gmf.compartment(collapsible="true")
  val Region[*] regions;
}

@gmf.node(label="name", label.icon="false", figure="rectangle", border.color="0,0,0")
class Region {
  attr String name;

  @gmf.compartment(collapsible="true")
  val State[*] containedstates;
}

@gmf.link(label="transitionInfo", source="source", target="destination", target.decoration="arrow", color="0,0,0")
class Transition {
  ref State[1] source;
  ref State[1] destination;
  attr String[1] transitionInfo = "[true]";
  attr int priority = 0;
}

@gmf.node(label="name", label.icon="false", figure="rectangle", label.placement="internal", color="245,245,245", border.color="0,0,0", label.pattern="{0}")
class GlobalCode {
  attr String name = "global code";

  @gmf.label
  attr String code = "";
  
  attr Boolean inHeaderFile = false;
}
