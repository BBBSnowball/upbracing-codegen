<%@ jet
	package="de.upbracing.code_generation"
	class="EepromHeaderTemplate"
	skeleton="generator.skeleton"
	imports="de.upbracing.code_generation.config.*" %>
/*
 * eeprom_accessors.h
 *
 * This file declares accessors for values in non-volatile memory (EEPROM).
 *
 * Generated automatically. DO NOT MODIFY! Change config.rb instead.
 */

#ifndef EEPROM_DATA_H_
#define EEPROM_DATA_H_

<% if (EEPROMConfigProvider.get(config).isEmpty()) { %>
// no EEPROM variables found
// You need to load an ECU configuration and select
// an ECU in your config file (config.rb).
// 
// #DEPENDS ON:
// ecu_list_file = "../../ecu-list.xml"
// 
// require 'parse-ecu-list.rb'
// 
// ecus = read_ecu_list(ecu_list_file)
// $config.ecus = ecus
// 
// $config.selectEcu("NAME")
<% } else { %>
#include <avr/eeprom.h>
#include "common.h"

/////////////////////////
///    EEPROM data    ///
/////////////////////////

//#pragma pack(push, 1)
typedef struct {
<%
Table t = new Table(stringBuffer);
t.start();
for (EEPROMVariable var : EEPROMConfigProvider.get(config)) { %>
	<%=var.getType()%>&&&<%=var.getName()%>;
<%
}
t.finish(" ");
%>
} EEPROMDATA;
//#pragma pack(pop)

extern EEPROMDATA eeprom_data EEMEM NO_UNUSED_WARNING_PLEASE;


#undef  EEPROM_POINTER
#define EEPROM_POINTER(name) &eeprom_data.name

<%
for (EEPROMVariable var : EEPROMConfigProvider.get(config)) {
	String name = var.getName();
	String NAME = var.getName().toUpperCase();
	String type = var.getType();
	int size = var.getSize();
	if (size <= 0) {
		size = CType.getSizeOf(type);
		
		if (size <= 0) {
			warn(stringBuffer, "Cannot determine length of type '" + type
				+ "'. Please set size for value '" + name + "' in ecu-list.xml. READ_"
				+ NAME + " and WRITE_" + NAME + " will not be generated now.");
			continue;
		}
	}
	
	String len_name;
	switch (size) {
		case 1:  len_name = "byte";  break;
		case 2:  len_name = "word";  break;
		case 4:  len_name = "dword"; break;
		default: len_name = "block"; break;
	}
	
	if (!len_name.equals("block")) {
		String uint_type = "uint" + (8*size) + "_t";
		boolean need_cast = (!uint_type.equals(type) && !type.equals("u" + (8*size)));
%>
#define READ_<%=NAME%>() <%= need_cast ? "("+type+")" : "" %>eeprom_read_<%=len_name%>(EEPROM_POINTER(<%=name%>))
#define WRITE_<%=NAME%>(value) eeprom_write_<%=len_name%>(EEPROM_POINTER(<%=name%>), <%= need_cast ? "("+uint_type+")(value)" : "value" %>)
<% 	} else { %>
#define READ_<%=NAME%>(dst) (<%=type%>)eeprom_read_block(dst, EEPROM_POINTER(<%=name%>), <%=size%>)
#define WRITE_<%=NAME%>(value) eeprom_write_block(EEPROM_POINTER(<%=name%>), value, <%=size%>)
<% 	}
}

}	// if we have EEPROM variables
%>

#endif	// not defined EEPROM_DATA_H_
