<%@ jet
	package="de.upbracing.code_generation"
	class="CanTemplate"
	skeleton="generator.skeleton"
	imports="de.upbracing.code_generation.config.* de.upbracing.dbc.* java.util.Map java.util.HashMap" %>

#define ECU_NODE_ID <%=config.getCurrentEcu().getNodeId()%>

#ifndef NO_DBC_CAN_DEFS

#ifndef DEFS_MAIN_FILE


/////////////////////////
///  CAN definitions  ///
/////////////////////////

// CAN Message IDs:
typedef enum uint32_t {
<%

DBCEcuConfig dbcEcu = (DBCEcuConfig) config.getCanConfig().getEcus().get(config.getCurrentEcu().getName());

Table t = new Table(stringBuffer);
t.start();

for (DBCMessage msg : dbcEcu.getRxMsgs()) {
	DBCMessageConfig msgconfig = (DBCMessageConfig) msg;	 
%>
	CAN_<%=msgconfig.getName()%>&&&= <%=msgconfig.getRawId()%>,&&&	// receive
<% 
	if (msgconfig.getAlias() != null) {
%>
	CAN_<%=msgconfig.getAlias()%>&&&= <%=msgconfig.getRawId()%>,&&&	// receive, alias for <%=msgconfig.getName()%>
<% 
	}
}

for (DBCMessage msg : dbcEcu.getTxMsgs()) {
	DBCMessageConfig msgconfig = (DBCMessageConfig) msg;
%>
	CAN_<%=msgconfig.getName()%>&&&= <%=msgconfig.getRawId()%>,&&&	// send
<%
	if (msgconfig.getAlias() != null) {
%>
	CAN_<%=msgconfig.getAlias()%>&&&= <%=msgconfig.getRawId()%>,&&&	// send, alias for <%=msgconfig.getName()%>
<% 
	}
} 


t.finish(" ");
%>
} CAN_msgID;

// do the messages use extended CAN ids or not (0 = standard, 1 = extended)
typedef enum {
<%
t.start();
for (DBCMessage msg : dbcEcu.getRxMsgs()) {
%>
	CAN_<%=msg.getName()%>_IsExtended&&&= <%=msg.isExtended()?1:0%>,
<% 
}
for (DBCMessage msg : dbcEcu.getTxMsgs()) {
%>
	CAN_<%=msg.getName()%>_IsExtended&&&= <%=msg.isExtended()?1:0%>,
<% 
}  
t.finish(" ");
%>
} CAN_isExtended;

/*
tx_msgs:<%
for (DBCMessage msg : dbcEcu.getTxMsgs()) {
	%> <%=msg.getName()%><%
}
%>
rx_msgs:<%
for (DBCMessage msg : dbcEcu.getRxMsgs()) {
	%> <%=msg.getName()%><%
}
%>
rx_signals:<%
for (DBCSignal signal : dbcEcu.getRxSignals()) {
	%> <%=signal.getName()%><%
}
%>
*/

#ifndef DONT_SET_VALUE_TABLES
<%
for (java.util.Map.Entry<String, DBCValueTable> e : config.getCan().getValueTables().entrySet()) {
	String name = e.getKey();
	DBCValueTable table = e.getValue();
	
%>
#ifndef SKIP_VT_<%=name%>
<%	
	if (name.equals("boolean")) {
%>
typedef bool boolean
<%
	} else {
%>
typedef enum _<%=name%> {
<%
		for (java.util.Map.Entry<String, String> e2 : table.entrySet()) {
%>
	<%=e2.getValue()%> = <%=e2.getKey()%>,
<%
		}
%>
} <%=name%>;
<%
	}
%>
#endif	// not defined SKIP_VT_<%=name%>
<%
}
%>

#endif	// not defined DONT_SET_VALUE_TABLES
#endif	// not defined DEFS_MAIN_FILE

#ifndef DEFS_MAIN_FILE

typedef enum {
<%

Map<String, Mob> mobs = new HashMap<String, Mob>();

int mobNumber = 1;
t.start();
// RX Messages
for (DBCMessage msg : dbcEcu.getRxMsgs()) {
	DBCMessageConfig msgconfig = (DBCMessageConfig) msg;
	if (msgconfig.getRxMob() != null)	{
		if (!mobs.containsKey(msgconfig.getRxMob())) {
%>
	MOB_<%=msgconfig.getRxMob()%>&&&= <%=mobNumber%>, &&&	// CAN ID: <%=msgconfig.getRawId()%><%=msgconfig.isExtended()?"x":""%>, receive
<%
		}
		if (mobs.containsKey(msgconfig.getRxMob())) mobs.get(msgconfig.getRxMob()).getMessages().add(msgconfig);
		else mobs.put(msgconfig.getRxMob(), new Mob(msgconfig));
	} else {	
%>
	MOB_<%=msgconfig.getName()%>&&&= <%=mobNumber%>, &&&	// CAN ID: <%=msgconfig.getRawId()%><%=msgconfig.isExtended()?"x":""%>, receive
<%
		if (msgconfig.getAlias() != null)
		{
%>
	MOB_<%=msgconfig.getAlias()%>&&&= <%=mobNumber%>, &&&	// CAN ID: <%=msgconfig.getRawId()%><%=msgconfig.isExtended()?"x":""%>, receive, alias for <%=msgconfig.getName()%>
<%
		}
		if (mobs.containsKey(msgconfig.getName())) mobs.get(msgconfig.getName()).getMessages().add(msgconfig);
		else mobs.put(msgconfig.getName(), new Mob(msgconfig));	
	}
	mobNumber++;
}

//TX Messages
for (DBCMessage msg : dbcEcu.getTxMsgs()) {
	DBCMessageConfig msgconfig = (DBCMessageConfig) msg;
	if (!msgconfig.isUsingGeneralTransmitter()) {
		if (msgconfig.getTxMob() != null)	{
			if (!mobs.containsKey(msgconfig.getTxMob())) {
%>
	MOB_<%=msgconfig.getTxMob()%>&&&= <%=mobNumber%>, &&&	// CAN ID: <%=msgconfig.getRawId()%><%=msgconfig.isExtended()?"x":""%>, send
<%
			}
			if (mobs.containsKey(msgconfig.getTxMob())) mobs.get(msgconfig.getTxMob()).getMessages().add(msgconfig);
			else mobs.put(msgconfig.getTxMob(), new Mob(msgconfig));
		} else {	
%>
	MOB_<%=msgconfig.getName()%>&&&= <%=mobNumber%>, &&&	// CAN ID: <%=msgconfig.getRawId()%><%=msgconfig.isExtended()?"x":""%>, send
<%
			if (msgconfig.getAlias() != null)
			{
%>
	MOB_<%=msgconfig.getAlias()%>&&&= <%=mobNumber%>, &&&	// CAN ID: <%=msgconfig.getRawId()%><%=msgconfig.isExtended()?"x":""%>, send, alias for <%=msgconfig.getName()%>
<%
			}
			if (mobs.containsKey(msgconfig.getName())) mobs.get(msgconfig.getName()).getMessages().add(msgconfig);
			else mobs.put(msgconfig.getName(), new Mob(msgconfig));	
		}
		mobNumber++;
	}
}

t.finish(" ");
%>

	MOB_GENERAL_MESSAGE_TRANSMITTER = <%=mobNumber%>
} MessageObjectID;

#endif	// not defined DEFS_MAIN_FILE

#include "can_at90.h"







<% // TODO include the global variable accessors (and initialisors of the glob vars...)%>








#ifndef DEFS_MAIN_FILE
// we use interrupts - polling isn't necessary
inline static void can_poll(void) { }
#endif

#ifdef DEFS_MAIN_FILE
// CAN receive interrupt
ISR(SIG_CAN_INTERRUPT1) {
	if (CANSIT1==0 && CANSIT2==0)
		//TODO we HAVE to reset the interrupt reason!
		return;

	uint8_t saved_canpage = CANPAGE;

	if (0) {	// dummy clause to make code generation easier
<%
for(Map.Entry<String, Mob> entry : mobs.entrySet()) {
	if (entry.getValue().getMessages().size() == 1) {
		//Only one Message in MOB
		DBCMessageConfig msgconfig = entry.getValue().getMessages().get(0);
		
%>
	} else if (can_caused_interrupt(MOB_<%=entry.getKey()%>)) {  	// CAN ID: <%=msgconfig.getRawId()%><%=msgconfig.isExtended()?"x":""%><%
	if (msgconfig.getAlias() != null) {%>, alias <%=msgconfig.getAlias()%><%}%>	
		CANPAGE = (MOB_<%=entry.getKey()%><<4);
		handle_<%=entry.getKey().toLowerCase()%>();
		// only necessary, if we change CANPAGE in our message handler
		// But if we forget to do that, the interrupt handler will be called forever.
		CANPAGE = (MOB_<%=entry.getKey()%><<4);	
<%
	
	} else {
		//Multiple Message in MOB
	
%>
	} else if (can_caused_interrupt(MOB_<%=entry.getKey()%>)) {  	// shared mob
		CANPAGE = (MOB_<%=entry.getKey()%><<4);
		if (0) {	// dummy clause to make code generation easier
<%
		
		for (DBCMessageConfig msgconfig : entry.getValue().getMessages()) {
%>
		} else if (1 && CANIDT3 == 0 && CANIDT4 == 128) {		// <%=msgconfig.getName()%>, CAN ID: <%=msgconfig.getRawId()%><%=msgconfig.isExtended()?"x":""%>
		
		



		<% } %>


		}
		// only necessary, if we change CANPAGE in our message handler
		// But if we forget to do that, the interrupt handler will be called forever.
		CANPAGE = (MOB_<%=entry.getKey()%><<4);	
<%

	
	}
	



}
%>
	
	<%//TODO Multiple Messages per MOB, Signals, Code Replacement%>


	} else {
		// well, this shouldn't happen
		// do nothing...
	}

    // reset INT reason
    CANSTMOB &= ~(1<<RXOK);
    // re-enable RX, reconfigure MOb IDE=1
    //CANCDMOB = (1<<CONMOB1) | (1<<IDE);
    CANCDMOB |= (1<<CONMOB1);

    // restore CANPAGE
    CANPAGE = saved_canpage;
}
#endif

#ifndef DEFS_MAIN_FILE
<%
for (DBCMessage msg : dbcEcu.getTxMsgs()) {
	DBCMessageConfig msgconfig = (DBCMessageConfig) msg;

	String mobName = msgconfig.getName();
	if (msgconfig.getTxMob() != null) mobName = msgconfig.getTxMob();
	if (msgconfig.isUsingGeneralTransmitter()) mobName = "GENERAL_MESSAGE_TRANSMITTER";

%>
// <%=msgconfig.getRawId()%><%=msgconfig.isExtended()?"x":""%>
inline static void send_<%=msgconfig.getName()%>(bool wait, boolean <%=msgconfig.getName()%>) {
	// select MOB
	CANPAGE = (MOB_<%=mobName%><<4);

	// wait for an ongoing transmission to finish
	can_mob_wait_for_transmission_of_current_mob();

	// reset transmission status
	CANSTMOB = 0;

	can_mob_init_transmit2(MOB_<%=mobName%>, CAN_<%=msgconfig.getName()%>, CAN_<%=msgconfig.getName()%>_IsExtended);

	// disable mob, as it would be retransmitted otherwise
	CANCDMOB = (CANCDMOB&0x30) | ((1&0xf)<<DLC0); <%//TODO How is this generated?%>

		<% //TODO Write Signals from global variables...%>
		
		
		
	if (wait)
		can_mob_transmit_wait(MOB_<%=mobName%>);
	else
		can_mob_transmit_nowait(MOB_<%=mobName%>);
}
inline static void send_<%=msgconfig.getName()%>_wait(boolean <%=msgconfig.getName()%>) {
	send_<%=msgconfig.getName()%>(true, <%=msgconfig.getName()%>);
}
inline static void send_<%=msgconfig.getName()%>_nowait(boolean <%=msgconfig.getName()%>) {
	send_<%=msgconfig.getName()%>(false, <%=msgconfig.getName()%>);
}
<% } %>


<% 
    return stringBuffer.toString();
}

void blub(StringBuffer stringBuffer) {


}

private String dummy(StringBuffer stringBuffer) {
%>
