<%@ jet
	package="de.upbracing.code_generation"
	class="CanCFileTemplate"
	skeleton="generator.skeleton"
	imports="de.upbracing.code_generation.config.* de.upbracing.code_generation.generators.CanGeneratorHelper de.upbracing.dbc.* java.util.List  de.upbracing.code_generation.common.Times" %>

<%

// check prerequisites for running the code generator

boolean run_generator = true;

de.upbracing.eculist.ECUDefinition current_ecu = config.getCurrentEcu();
DBCConfig can_config = config.getCan();

if (can_config == null) {
	run_generator = false;
%>// not generating CAN code because DBC file hasn't been provided
// use $config.can = parse_dbc(dbc_file)
<%
} else if (current_ecu == null) {
	run_generator = false;
%>// not generating CAN code because no ECU has been selected
// use $config.selectEcu(name)
<%
}

// if we still want to run, check the name
DBCEcuConfig dbcEcu = null;
if (run_generator) {
	// find ecu by its node name (the one meant for lookup in the DBC file)
	DBCEcu dbcEcu_ = can_config.getEcus().get(current_ecu.getNodeName());
	
	// use the normal name as backup
	if (dbcEcu_ == null)
		dbcEcu_ = can_config.getEcus().get(current_ecu.getName());
	
	// check, whether we have a config
	if (dbcEcu_ != null) {
		dbcEcu = (DBCEcuConfig) dbcEcu_;
	} else {
		run_generator = false;
	%>#error The DBC file doesn't have an ECU with name '<%= current_ecu.getNodeName() %>'
	<%
	}
}


if (run_generator) { 

	Messages messages = new Messages().withOutputTo(System.err);

%>
#include "can.h"
#include "can_at90.h"
#include "global_variables.h"
#include <avr/interrupt.h>

<%
String cdecls = config.getCan().getCFileDeclarations();
if (cdecls != null && !cdecls.isEmpty()) {
%>

/////////////////////////
/// user declarations ///
/////////////////////////

<%= cdecls %>

<%
}

GlobalVariableConfig globVars = config.getGlobalVariables();





%>
// CAN receive interrupt
ISR(SIG_CAN_INTERRUPT1) {
	if (CANSIT1==0 && CANSIT2==0)
		//TODO we HAVE to reset the interrupt reason!
		return;

	uint8_t saved_canpage = CANPAGE;

	if (0) {	// dummy clause to make code generation easier
<%
for (Mob mob : dbcEcu.getMobs()) {

	if( mob.getRxMessages().size() == 0 && mob.getOnRx() == null ) continue;
	
	String mobdesc;
	if (mob.getOnRx() != null)
		mobdesc = "custom mob";
	if (mob.getRxMessages().size() == 1) {
		DBCMessageConfig msgconfig = mob.getRxMessages().get(0);
		mobdesc = "CAN ID: " + CanGeneratorHelper.messageId(msgconfig, true);
		if (msgconfig.getAliases().size() > 0) mobdesc += ", alias: " + CanGeneratorHelper.implode(msgconfig.getAliases());
	} else {
		mobdesc = "shared mob";
	}
	
	
%>
	} else if (can_caused_interrupt(MOB_<%= mob.getName() %>)) {		// <%= mobdesc %>
		CANPAGE = (MOB_<%= mob.getName() %><<4);
<%
		if (mob.getOnRx() != null) {
			CanGeneratorHelper.printCode(stringBuffer, mob.getOnRx(), "\t\t");
		} else if (mob.getRxMessages().size() == 1) {
			//Only one Message in MOB
			readMessageCode(stringBuffer, messages, globVars, mob.getRxMessages().get(0), dbcEcu, "\t\t");
		} else {
		//Multiple Message in MOB

%>
		if (0) {	// dummy clause to make code generation easier
<%
		for (DBCMessageConfig msgconfig : mob.getRxMessages()) {
		
			String ifstatement = "(1";
			
			if ((mob.getMask()[3] & 1) != 1) {
				// mcu doen't check this bit
				if (msgconfig.isExtended())
					ifstatement += " && (CANCDMOB & (1<<IDE))";
				else
					ifstatement += " && !(CANCDMOB & (1<<IDE))";
			}
			int[] significant_diffs = mob.getSignificantDiffs();
			int[] id = msgconfig.canIdForMob();
			for (int i=0; i<4; i++) {
				int significant_bits[] = mob.getSignificantBits(msgconfig.isExtended());
				if (significant_diffs[i] != 0) {
					// some bits are undefined
					// We must make sure that we don't include them in our
					// checks as this would yield a wrong result sometimes.
					int mask = significant_bits[i];
					if (mask == 0x00)
						// do nothing
						;
					else if (mask == 0xff)
						// no mask
						ifstatement += String.format(" && CANIDT%d == 0x%02x", (i+1), id[i] & mask);
					else
						ifstatement += String.format(" && (CANIDT%d & 0x%02x) == 0x%02x", (i+1), mask, id[i] & mask);
				}
			}
				
			ifstatement += ")";
		
%>
		} else if <%= ifstatement %> {		// <%=msgconfig.getName()%>, CAN ID: <%=CanGeneratorHelper.messageId(msgconfig, true)%>
<%
			readMessageCode(stringBuffer, messages, globVars, msgconfig, dbcEcu, "\t\t\t");			
		}
%>
		}
<%
	}
%>
		// only necessary, if we change CANPAGE in our message handler
		// But if we forget to do that, the interrupt handler will be called forever.
		CANPAGE = (MOB_<%= mob.getName() %><<4);
<%
}
%>
	} else {
		// well, this shouldn't happen
		// do nothing...
	}

    // reset INT reason
    CANSTMOB &= ~(1<<RXOK);
    // re-enable RX, reconfigure MOb IDE=1
    //CANCDMOB = (1<<CONMOB1) | (1<<IDE);
    CANCDMOB |= (1<<CONMOB1);

    // restore CANPAGE
    CANPAGE = saved_canpage;
}

void can_init_mobs(void) {
<%
//for(Map.Entry<String, Mob> entry : mobs.entrySet()) {
for(Mob mob : dbcEcu.getMobs()) {
	if (mob.getRxMessages().isEmpty() && mob.getTxMessages().isEmpty()) {
		// ignoring user MOb
	} else if (mob.getRxMessages().size() == 0 && mob.getTxMessages().size() > 1) {
%>
	// not initialising shared MOB MOB_<%= mob.getName() %> for messages <%= CanGeneratorHelper.implodeMessages(mob.getTxMessages()) %>
<%
	} else if(mob.isDisabled()) {
%>
	// not initialising disabled MOB MOB_<%= mob.getName() %> for messages <%= CanGeneratorHelper.implodeMessages(mob.getTxMessages()) %>
<%
	} else {
%>
	can_init_MOB_<%= mob.getName() %>();
<%
	}
}

%>
}
<%
if (dbcEcu.getSendingTasks().size() > 0) {
%>

#include "Os.h"

//OS Tasks for periodic sending of messages:
<%
	for (List<DBCMessageConfig> list : dbcEcu.getSendingTasks()) {
		
	String taskDescription;
	if (list.size() == 1) {
		taskDescription = "period: " + Times.formatTime(list.get(0).getPeriod()) + ". Task for message " + list.get(0).getName();
	} else {
		taskDescription = "period: " + Times.formatTime(list.get(0).getPeriod()) + ". Shared task for messages " + 
		                  CanGeneratorHelper.implodeMessages(list);
	}
	
%>

TASK(<%= list.get(0).getName() %>) { //<%= taskDescription %>
<%
		for (DBCMessageConfig msg : list) {
			String params = "";
			int parNo = 0;
%>

	//Sending message <%= msg.getName() %>
	{
<%
			if (!CanGeneratorHelper.printCode(stringBuffer, msg.getTaskAll(), "\t\t")) {
				
				CanGeneratorHelper.printCode(stringBuffer, msg.getBeforeTask(), "\t\t");
				
				for (DBCSignal signal : msg.getSignalOrder()) {
					DBCSignalConfig signalconfig = (DBCSignalConfig)signal;
					CanGeneratorHelper.printCode(stringBuffer, signalconfig.getBeforeTask(), "\t\t");
				}
				
				for (DBCSignal signal : msg.getSignalOrder()) {
					DBCSignalConfig signalconfig = (DBCSignalConfig) signal;
					parNo++;
					if (parNo > 1) params += ", ";
					params += "par" + parNo;
					
					String readValue;
					if (signalconfig.getReadValueTask() != null) 
						readValue = signalconfig.getReadValueTask();
					else
						readValue = globVars.get(signalconfig.getGlobalVarName()).getGetterName() + "()";
						
					CanGeneratorHelper.printCode(stringBuffer, signalconfig.getBeforeReadValueTask(), "\t\t");
%>
		<%= signalconfig.getCType() %> par<%= parNo %>;
		par<%= parNo %> = <%= readValue %>; //read value
<%
					CanGeneratorHelper.printCode(stringBuffer, signalconfig.getAfterReadValueTask(), "\t\t");
				}
%>
		send_<%=msg.getName()%>_nowait(<%= params %>);
<%

				for (DBCSignal signal : msg.getSignalOrder()) {
					DBCSignalConfig signalconfig = (DBCSignalConfig)signal;
					CanGeneratorHelper.printCode(stringBuffer, signalconfig.getAfterTask(), "\t\t");
				}

				CanGeneratorHelper.printCode(stringBuffer, msg.getAfterTask(), "\t\t");
			}
%>
	}
<%
		}
%>
	TerminateTask();
}
<%
	}
}
%>
<% messages.summarizeForCode(stringBuffer); %>

<%
	
} // if run_generator
 
    return stringBuffer.toString();
}	// end of method generate(...)

void readMessageCode(StringBuffer stringBuffer, Messages messages, GlobalVariableConfig globVars, DBCMessageConfig msg, DBCEcu currentEcu, String indent) {
	CanGeneratorHelper.printCode(stringBuffer, msg.getBeforeRx(), indent);
	for(DBCSignal signal : msg.getSignalOrder()) {
		if (signal.getRxEcus().contains(currentEcu))
			CanGeneratorHelper.printCode(stringBuffer, ((DBCSignalConfig)signal).getBeforeRx(), indent);
	}
	
	if (!CanGeneratorHelper.printCode(stringBuffer, msg.getRxHandler(), indent)) {
		int addr = 0;

		for(DBCSignal sig : msg.getSignalOrder()) {
			DBCSignalConfig signal = (DBCSignalConfig)sig;

			if (signal.getRxEcus().contains(currentEcu)) {

				int start = signal.getStart();
				int len = signal.getLength();
				String name = signal.getName();
				
				//TODO The pdf file says that '1' would mean big endian, but
				//     CANdb++ shows that as "intel" - which is little endian.
				//     Our programs agree with that so the RapidPro seems to
				//     use '1' for little endian as well.
				boolean big_endian = !signal.getEndianness().equals("1");

				//TODO by how much must we change the start index?
				if (big_endian)
					// this formula is for the values shown in CANdb++
					// start -= len - 8;
					// this formula is for the values that are saved in the dbc file
					start -= 7;
				
				if (start%8 != 0 || len%8 != 0) {
					//TODO support that
					%><% messages.warn("The signal " + name + " is not aligned on a byte boundary, so it will be ignored.").formatForCode(stringBuffer); %><%
					continue;
				}
				if (addr > start) {
					//TODO support overlapping signals (only if CANdb++ support them, of course)
					%><% messages.warn("Cannot read overlapping signals. Ignoring signal " + name + ".").formatForCode(stringBuffer); %><%
					continue;
				}
					
				if (addr < start) {
%>

<%=indent%>// skipping <%= ((start-addr)/8) %> byte(s)
<%
					while (addr < start) {
%>
<%=indent%>CANMSG;
<%
						addr += 8;
					}
				}
		
				//TODO support other types
				//TODO or should we use get_signal_int_type? what happens, if we use
				//     an enum in a union - the size of the enum can be chosen by the
				//     compiler
				String type = signal.getCType();		
%>

<%=indent%>// reading signal <%= signal.getName() %>
<%=indent%>{
<%
				CanGeneratorHelper.printCode(stringBuffer, signal.getImmBeforeRx(), indent + "\t");


				if (len == 8) {
%>
<%=indent%>	<%= type %> value = <%= (type.equals("uint8_t")) ? "" : "(" + type + ") " %>CANMSG;
<% 
					//echo "$indent\t$type value = ";
					//if ($type != "uint8_t")
					//	echo "($type) ";
					//echo "CANMSG;\n";
					addr += 8;
				} else {
%>
<%=indent%>	union {
<%=indent%>		<%= type %> value;
<%=indent%>		struct {
<%
					for (int i=0; i<len/8; i++) {
%>
<%=indent%>			uint8_t byte<%= i %>;
<%
					}
%>
<%=indent%>		} bytes;
<%=indent%>	} x;
<%					
					int bytes = len/8;
					if (big_endian) {	//TODO which one is big endian?
						// big endian
						for (int i=0; i<bytes; i++) {
%>
<%=indent%>	x.bytes.byte<%= (bytes-i-1) %> = CANMSG;
<%
							addr += 8;
						}
					} else {
						// little endian
						for (int i=0; i<bytes; i++) {
%>
<%=indent%>	x.bytes.byte<%= i %> = CANMSG;
<%
							addr += 8;
						}
					}
					
					// Make sure that factor and offsets are as expected
					//TODO: automatically adjust the value to match the expectations
					//      (without using floating-point arithmetic - this can be tricky, but it's possible)
					
					// We have to compare the factor and offset to the expected values. This
					// is quite tricky because a small change in the factor can be significant,
					// if the factor is small and the amount of error we can allow for the
					// offset depends on the factor.
					// => If the error is much lower than the effect of a small change in the
					//    raw value, we accept it.
					
					// test at different points: small - offset dominates, high - factor dominates
					// (len is the length of the value in bits)
					//NOTE We are using theoretical max and min. We could also use the real values,
					//     if they are given in the DBC file.
					int test_points[];
					if (signal.isSignedValue()) {
						test_points = new int[] {
							(-1) << (len - 1),	// smallest	(0x80 for 8 bit -> -127)
							(-1) << (len - 2),	// center negative	(0xc0 for 8 bit -> -63)
							0,
							(+1) << (len - 2),	// center positive	(0x40 for 8 bit -> 64)
							((+1) << (len - 1)) - 1,	// max		(0x7f for 8 bit -> 127)
						};
					} else {
						test_points = new int[] {
							0,				// zero
							1 << (len - 1),	// center	(0x80 for 8 bit -> 127)
							(1 << len) - 1,	// max		(0xff for 8 bit -> 255)
						};
					}
					for (int test_point : test_points) {
						float real_a = test_point * signal.getFactor() + signal.getOffset();
						float expected_a = test_point * signal.getExpectedFactor() + signal.getExpectedOffset();
						float real_b = (test_point - 1) * signal.getFactor() + signal.getOffset();
						float raw_change = real_b - real_a;
						float error = expected_a - real_a;
						if (Math.abs(error * 10) > Math.abs(raw_change)) {
							messages.warn("The program expects a different formula for converting the signal " + name + " to physical units. Automatic adjustment is not supported, yet:\n"
									+ "\texpected by program: physical_value = raw_value * " + signal.getExpectedFactorNumerator() + "/" + signal.getExpectedFactorDenominator()
										+ " + " + signal.getExpectedOffset() + "\n"
									+ "\ton the CAN bus: physical_value = raw_value * " + signal.getFactor() + " + " + signal.getOffset() + "\n"
									+ "\t(For example, the error for raw_value = " + test_point + " is " + Math.abs(error) + ", but it may be higher for other values.)")
								.formatForCode(stringBuffer);
							
							// don't print warnings for the other test points
							break;
						}
					}
%>
<%=indent%>	<%= type %> value = x.value;
<%
				}	// len != 8
				
				if (! CanGeneratorHelper.printCode(stringBuffer, signal.getPutValue(), indent + "\t")) {
					//Not sure if we still need places and variables now that we use the os global variables...
					/*String var = "";
					if (signal.getPlace() != null && signal.getPlace().length() > 0)
						var = signal.getPlace();
					else if (signal.getVariable() != null && signal.getVariable().length() > 0)
						var = signal.getVariable();
					else
						var = signal.getName();
						
					var = value;  */
%>
<%=indent%>	<%= globVars.get(signal.getGlobalVarName()).getSetterName() %>(value);
<%
				}
				CanGeneratorHelper.printCode(stringBuffer, signal.getImmAfterRx(), indent + "\t");
%>
<%=indent%>}
<%

			}
		}
		
		if (addr > msg.getLength()*8) {
			 %><% messages.warn("Message " + msg.getName() + " too short: We need " + addr + " bits, but we only have " + (msg.getLength()*8) + ".").formatForCode(stringBuffer); %><%
		}
		
	}
	
	for(DBCSignal signal : msg.getSignalOrder()) {
		if (signal.getRxEcus().contains(currentEcu)) 
			CanGeneratorHelper.printCode(stringBuffer, ((DBCSignalConfig)signal).getAfterRx(), indent);
	}
	CanGeneratorHelper.printCode(stringBuffer, msg.getAfterRx(), indent);
	
}

@SuppressWarnings("unused")
private String dummy(StringBuffer stringBuffer) {%>