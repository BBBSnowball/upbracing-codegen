<%@ jet
	package="de.upbracing.code_generation"
	class="GlobalVariableHeaderTemplate"
	skeleton="generator.skeleton"
	imports="de.upbracing.code_generation.config.* java.util.*" %>
/*
 * global_variables.h
 *
 * This file defines thread-safe accessors for global variables.
 *
 * Generated automatically. DO NOT MODIFY! Change config.rb instead.
 */

#ifndef GLOBAL_VARIABLES_H_
#define GLOBAL_VARIABLES_H_

<%

if (config.getGlobalVariables().getDeclarations().isEmpty()
	&& config.getGlobalVariables().isEmpty()) {

%>

// no global variables
// You can define some in config.rb

<% } else { %>

#include <stdint.h>
#include <Os.h>

<%

if (config.getGlobalVariables().getDeclarations().size() > 0) {
%>

// Generated declarations
<%
}

for(String declaration : config.getGlobalVariables().getDeclarations()) {
%>
<%= declaration %><%
}
%>

//////////////////////////
///  global variables  ///
//////////////////////////

<%
@SuppressWarnings("unchecked")
HashMap<String, String> varnames = (HashMap<String, String>) generator_data;
Table t = new Table(stringBuffer);
t.start();
for (GlobalVariable var : config.getGlobalVariables()) {
	String varname = varnames.get(var.getName());
%>
extern <%= var.getType() %>&&&<%= varname %>;
<% } t.finish(" "); %>


<%
for (GlobalVariable var : config.getGlobalVariables()) {
	String name = var.getName();
	String varname = varnames.get(name);
	//String Name = TemplateHelpers.capitalize(name);
	//String NAME= name.toUpperCase();
	int size = var.getSize();
	if (size < 0) {
		size = CType.getSizeOf(var.getType());
	}
	boolean needs_critical_section = (size != 1);
	boolean may_need_critical_section = (size < 0);
%>
inline static <%= var.getType() %> <%= var.getGetterName() %>() {
<% if (may_need_critical_section) { %>
	// couldn't determine size of type -> let the compiler decide
	if (sizeof(<%= var.getType() %>) > 1)
		OS_ENTER_CRITICAL();
	
	volatile <%= var.getType() %> tmp = <%= varname %>;
	
	if (sizeof(<%= var.getType() %>) > 1)
		OS_EXIT_CRITICAL();
		
	return tmp;
<% } else if (needs_critical_section) { %>
	OS_ENTER_CRITICAL();
	volatile <%= var.getType() %> tmp = <%= varname %>;
	OS_EXIT_CRITICAL();
	return tmp;
<% } else { %>
	return <%= varname %>;
<% } %>
}

inline static void <%= var.getSetterName() %>(<%= var.getType() %> value) {
<% if (may_need_critical_section) { %>
	// couldn't determine size of type -> let the compiler decide
	if (sizeof(<%= var.getType() %>) > 1)
		OS_ENTER_CRITICAL();
	
	<%= varname %> = value;
	
	if (sizeof(<%= var.getType() %>) > 1)
		OS_EXIT_CRITICAL();
<% } else if (needs_critical_section) { %>
	OS_ENTER_CRITICAL();
	<%= varname %> = value;
	OS_EXIT_CRITICAL();
<% } else { %>
	<%= varname %> = value;
<% } %>
}

<%
}

} // if there are some global variables
%>

#endif	// not defined GLOBAL_VARIABLES_H_
