«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»


«IMPORT org::yakindu::sct::generator::xpand»
«EXTENSION org::yakindu::sct::generator::xpand::expression»
«EXTENSION org::yakindu::sct::generator::xpand::Name»

«DEFINE file FOR ExecutionFlow-»
«FILE this.name + "_event.c"-»

«EXPAND ActionCode FOREACH this.states.reactSequence.typeSelect(Step)»

«FOREACH this.states AS state»
«FOREACH  this.states.reactSequence.steps.typeSelect(Step).typeSelect(If) AS e»
void «EXPAND ActionCode FOR e.check-»() {
«IF e.check.condition.toCCode() != null-»
void «EXPAND ActionCode FOR e.check-»() {
OS_ENTER_CRITICAL(); 
{
switch(«this.name-».state):
		case «this.name + "_" + state.simpleName-» :
		«EXPAND ActionCode FOR e.thenStep-»
				break;
		default:
				break;
}
OS_EXIT_CRITICAL();
}
«ENDIF»
«IF (e.elseStep != null)»
«EXPAND ActionCode FOR e.elseStep»
«ENDIF»
«ENDFOREACH»
«ENDFOREACH»
«ENDFILE»
«ENDDEFINE»

«DEFINE ActionCode FOR Step-»
«ENDDEFINE»

«DEFINE ActionCode FOR Execution-»
	«this.statement.toCCode()»;
«ENDDEFINE»

«DEFINE ActionCode FOR Sequence -»
  «EXPAND ActionCode FOREACH this.steps-»
«ENDDEFINE»

«REM»name of the event«ENDREM»
«DEFINE ActionCode FOR Check -»
«IF this != null -»
«this.condition.toCCode() -»
«ELSE -» 1 
«ENDIF -»
«ENDDEFINE»

«REM»conditional part for possible transitions on an event«ENDREM»
«DEFINE ActionCode FOR If»
«IF this.check.condition.toCCode() != null-»
void «EXPAND ActionCode FOR this.check-»() {
OS_ENTER_CRITICAL(); 
{
switch(«this.thenStep.scName()-».state):
		case «this.thenStep.getStateName().subString(20, this.thenStep.getStateName().length)-» :
		«EXPAND ActionCode FOR this.thenStep-»
				break;
		default:
				break;
}
OS_EXIT_CRITICAL();
}
«ENDIF»
«IF (this.elseStep != null)»
«EXPAND ActionCode FOR this.elseStep»
«ENDIF»
«ENDDEFINE»

«REM»For changing state«ENDREM»
«DEFINE ActionCode FOR EnterState-»
counter_state = counter_«this.state.simpleName»_state;
«ENDDEFINE»

«REM»State exit code«ENDREM»
«DEFINE ActionCode FOR ExitState-»
«ENDDEFINE»

